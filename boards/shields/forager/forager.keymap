#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define MEH LS(LC(LALT))

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            // quick_tap_ms = <0>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        sabk: shift_to_alt_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp LA(BSPC)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        sym_bspc: left_thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&sabk>;
        };
        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };
        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&mt ESCAPE Q  &kp W           &kp E           &kp R             &kp T                           &kp Y                         &kp U             &kp I           &kp O           &kp P
&mt LCTRL A   &mt LEFT_ALT S  &mt LEFT_GUI D  &mt LEFT_SHIFT F  &mt LA(LC(LG(LEFT_SHIFT))) G    &mt LA(LC(LG(LEFT_SHIFT))) H  &mt LEFT_SHIFT J  &mt LEFT_GUI K  &mt LEFT_ALT L  &mt LEFT_CONTROL SEMICOLON
&kp Z         &kp X           &kp C           &kp V             &kp B                           &kp N                         &kp M             &kp COMMA       &kp PERIOD      &kp SLASH
                                              &lt 1 BACKSPACE   &lt 3 TAB                       &lt 2 ENTER                   &lt 1 SPACE
            >;
        };

        sym {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT    &kp PLUS    &kp AMPERSAND  &kp HASH    &kp UNDERSCORE     &kp ASTERISK
&kp CARET        &kp TILDE      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR     &kp MINUS   &kp GRAVE      &kp SQT     &kp DOUBLE_QUOTES  &kp EQUAL
&none            &kp BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none          &kp PERIOD  &kp PIPE       &caps_word  &kp CAPSLOCK       &kp SLASH
                                                      &trans                 &trans         &trans      &trans
            >;
        };

        nav {
            bindings = <
&kp               &kp           &kp           &kp             &kp                           &kp PG_UP      &kp HOME  &kp UP    &kp END    &kp SYSREQ
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LA(LC(LG(LEFT_SHIFT)))    &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp
&kp F1            &kp F2        &kp F3        &kp F4          &kp F5                        &kp F6         &kp F7    &kp F8    &kp F9     &kp F10
                                              &kp DELETE      &kp                           &kp            &kp
            >;
        };

        num {
            bindings = <
&none             &none         &kp LEFT_PARENTHESIS     &kp RIGHT_PARENTHESIS       &none                         &kp PLUS   &kp N7  &kp N8  &kp N9  &kp
&kp LEFT_CONTROL  &kp LEFT_ALT  &mt LEFT_GUI LEFT_BRACE  &mt LEFT_SHIFT RIGHT_BRACE  &kp LA(LC(LG(LEFT_SHIFT)))    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL
&none             &none         &kp LEFT_BRACKET         &kp RIGHT_BRACKET           &kp                           &kp DOT    &kp N1  &kp N2  &kp N3  &kp FSLH
                                                         &trans                      &trans                        &kp N0     &trans
            >;
        };
    };
};

&lt {
    // require-prior-idle-ms = <100>;
    tapping-term-ms = <150>;
    quick-tap-ms = <200>;
};

&mt {
    quick-tap-ms = <200>;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};
