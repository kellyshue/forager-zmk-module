#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define MEH LS(LC(LALT))

/ {
    combos {
        compatible = "zmk,combos";

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <10 20>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <11 21>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <12 22>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <13 23>;
        };

        spaste {
            bindings = <&kp LG(LS(V))>;
            key-positions = <14 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&mt ESCAPE Q  &kp W           &kp E           &kp R             &kp T                           &kp Y                         &kp U             &kp I           &kp O           &kp P
&mt LCTRL A   &mt LEFT_ALT S  &mt LEFT_GUI D  &mt LEFT_SHIFT F  &mt LA(LC(LG(LEFT_SHIFT))) G    &mt LA(LC(LG(LEFT_SHIFT))) H  &mt LEFT_SHIFT J  &mt LEFT_GUI K  &mt LEFT_ALT L  &mt LEFT_CONTROL SEMICOLON
&kp Z         &kp X           &kp C           &kp V             &kp B                           &kp N                         &kp M             &kp COMMA       &kp PERIOD      &kp SLASH
                                              &lt 1 BACKSPACE   &lt 3 TAB                       &lt 2 ENTER                   &lt 1 SPACE
            >;
        };

        sym {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT    &kp PLUS    &kp AMPERSAND  &kp HASH    &kp UNDERSCORE     &kp ASTERISK
&kp CARET        &kp TILDE      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR     &kp MINUS   &kp GRAVE      &kp SQT     &kp DOUBLE_QUOTES  &kp EQUAL
&none            &kp BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none          &kp PERIOD  &kp PIPE       &caps_word  &kp CAPSLOCK       &kp SLASH
                                                      &trans                 &trans         &trans      &trans
            >;
        };

        nav {
            bindings = <
&kp               &kp           &kp           &kp             &kp                           &kp PG_UP      &kp HOME  &kp UP    &kp END    &kp SYSREQ
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LA(LC(LG(LEFT_SHIFT)))    &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp
&kp F1            &kp F2        &kp F3        &kp F4          &kp F5                        &kp F6         &kp F7    &kp F8    &kp F9     &kp F10
                                              &kp DELETE      &kp                           &kp            &kp
            >;
        };

        num {
            bindings = <
&none             &none         &kp LEFT_PARENTHESIS     &kp RIGHT_PARENTHESIS       &none                         &kp PLUS   &kp N7  &kp N8  &kp N9  &kp
&kp LEFT_CONTROL  &kp LEFT_ALT  &mt LEFT_GUI LEFT_BRACE  &mt LEFT_SHIFT RIGHT_BRACE  &kp LA(LC(LG(LEFT_SHIFT)))    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL
&none             &none         &kp LEFT_BRACKET         &kp RIGHT_BRACKET           &kp                           &kp DOT    &kp N1  &kp N2  &kp N3  &kp FSLH
                                                         &trans                      &trans                        &kp N0     &trans
            >;
        };
    };
};
