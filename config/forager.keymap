#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define NAV  2
#define NUM  3

#define HYPER LA(LC(LG(LSHFT)))

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33

/ {
    behaviors {
        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor =    "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        lhms: left_homerow_mods_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor =    "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            // require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;

        };
        rhms: right_homerow_mods_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            // require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;

        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 10>;
            require-prior-idle-ms = <150>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <10 20>;
            require-prior-idle-ms = <150>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <11 21>;
            require-prior-idle-ms = <150>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <12 22>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <13 23>;
            require-prior-idle-ms = <150>;
        };

        spaste {
            bindings = <&kp LG(LS(V))>;
            key-positions = <14 24>;
            require-prior-idle-ms = <150>;
        };

        numlayer {
            bindings = <&to 3>;
            key-positions = <19 29>;
            require-prior-idle-ms = <150>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp Q           &kp W           &kp E           &kp R                 &kp T                                           &kp Y                             &kp U           &kp I               &kp O           &kp P
            &lhm LCTRL A    &lhm LALT S     &lhm LGUI D     &lhms LSHFT F     &lhm HYPER G                             &rhm HYPER H          &rhms LSHFT J    &rhm LGUI K         &rhm LALT L     &rhm LCTRL SEMICOLON
            &kp Z           &kp X           &kp C           &kp V                 &kp B                                           &kp N                             &kp M           &kp COMMA           &kp PERIOD      &kp SLASH
                                                                                  &lt 1 BACKSPACE   &lt 3 TAB    &lt 2 ENTER    &lt 1 SPACE
            >;
        };

        sym {
            bindings = <
            &kp EXCL         &kp AT         &kp LPAR             &kp RPAR              &kp PRCNT     &kp PLUS    &kp AMPS       &kp HASH    &kp UNDER        &kp STAR
            &kp CARET        &kp TILDE      &kp LBRC             &kp RBRC              &kp DLLR      &kp MINUS   &kp GRAVE      &kp SQT     &kp DQT          &kp EQUAL
            &none            &kp BSLH       &kp LBKT             &kp RBKT              &none         &kp DOT     &kp PIPE       &caps_word  &kp CAPS         &kp FSLH
                                                     &trans                &trans        &trans      &trans
            >;
        };

        nav {
            bindings = <
            &none             &none         &none         &none           &none                       &kp PG_UP      &kp HOME  &kp UP    &kp END    &kp SYSREQ
            &kp LCTRL         &kp LALT      &kp LGUI      &kp LSHFT       &kp HYPER       &kp PG_DN      &kp LEFT  &kp DOWN  &kp RIGHT  &none
            &kp F1            &kp F2        &kp F3        &kp F4          &kp F5                      &kp F6         &kp F7    &kp F8    &kp F9     &kp F10
                                                    &kp DEL         &trans                      &trans         &trans
             >;
        };

        num {
            bindings = <
            &none             &none         &kp LPAR              &kp RPAR              &none                           &kp PLUS   &kp N7  &kp N8  &kp N9  &kp KP_ASTERISK
            &kp LCTRL         &kp LALT      &lhm LGUI LBRC         &lhms LSHFT RBRC        &kp HYPER           &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL
            &none             &none         &kp LBKT              &kp RBKT              &to 0                          &kp DOT    &kp N1  &kp N2  &kp N3  &kp FSLH
                                                            &trans                &trans                       &kp N0   &trans
            >;
        };
    };
};

&lt {
    require-prior-idle-ms = <150>;
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

